(this["webpackJsonpportfolio-site"]=this["webpackJsonpportfolio-site"]||[]).push([[0],{34:function(e,t,a){},35:function(e,t,a){},90:function(e,t,a){},97:function(e,t,a){"use strict";a.r(t);var s=a(118),o=a(2),r=a(77),i=a.n(r),n=a(117),c=a(119),h=a(21),d=a(11),l=a(122),b=(a(34),a(35),a(6)),u=a(109),m=a(110),j=a(121),p=a(111),f=a(112),g=a(120),y=a(113),x=a(114),w=(a(90),a.p,a(78)),O=a.n(w),v=a.p+"static/media/Patch_Bot.f3b8ea2c.JPG",k=a.p+"static/media/BdayBot.375b9282.jpg",I=a.p+"static/media/Puzzle_Partial.f47f5ed1.JPG",z=a(0);var S=function(){return new O.a('a[href*="#"]',{speed:1e3}),Object(z.jsxs)("div",{class:"branches",id:"home",children:[Object(z.jsx)("div",{id:"leaves",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)("div",{id:"leavesleft",children:Object(b.a)(Array(15).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)(u.a,{children:Object(z.jsx)(m.a,{minH:["30vh","40vh","100vh","100vh","100vh"],children:Object(z.jsxs)(j.a,{spacing:8,children:[Object(z.jsx)(p.a,{id:"name",children:"Marguerite"}),Object(z.jsx)(f.a,{id:"subtitle",children:"blossoming software engineer"}),Object(z.jsx)("a",{id:"downButton","data-scroll":!0,href:"#projects",children:Object(z.jsx)(y.a,{w:[5,6,8,9,10],h:10})})]})})}),Object(z.jsx)("div",{id:"projects"}),Object(z.jsx)(u.a,{id:"projectBox",children:Object(z.jsxs)(m.a,{minH:["100vh","130vh","100vh","55vh","50vh"],p:[1,1,1,3,3],templateColumns:["repeat(1, 1fr)","repeat(1, 1fr)","repeat(1, 1fr)","repeat(3, 1fr)","repeat(3, 1fr)"],gap:6,children:[Object(z.jsx)(m.b,{colSpan:1,children:Object(z.jsx)(j.a,{spacing:8,children:Object(z.jsx)("img",{class:"projectImage",src:v,width:"65%"})})}),Object(z.jsxs)(m.b,{id:"gridItem",w:["90%","84%","80%","80%","80%"],h:"95%",colSpan:[1,1,1,2,2],children:[Object(z.jsx)("div",{id:"projectHeader",children:"Dota 2 Patch Bot"}),Object(z.jsx)("div",{id:"projectText",children:"A Discord bot that posts updates and news about the video game, Dota 2. It posts a link to the official updates to a specified Discord channel in a Discord server and also creates a role in that server to allow certain people to be alerted when a new update is posted. The bot makes calls to the Steam Web API every 2 minutes to check for Dota 2 news and updates. Built using Javascript and Discord.js."}),Object(z.jsx)(j.a,{align:["center","center","center","start","start"],children:Object(z.jsx)(g.a,{id:"button",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:Object(z.jsx)(h.b,{to:"/patchbot",children:"Learn More"})})})]})]})}),Object(z.jsx)(u.a,{id:"projectBox",children:Object(z.jsxs)(m.a,{minH:["100vh","130vh","100vh","55vh","50vh"],p:[1,1,1,3,3],templateColumns:["repeat(1, 1fr)","repeat(1, 1fr)","repeat(1, 1fr)","repeat(3, 1fr)","repeat(3, 1fr)"],gap:6,children:[Object(z.jsxs)(m.b,{id:"gridItem",w:["90%","84%","80%","80%","80%"],h:"95%",colSpan:[1,1,1,2,2],children:[Object(z.jsx)("div",{id:"projectHeader",children:"Grid Puzzle Game"}),Object(z.jsx)("div",{id:"projectText",children:"A randomly generated grid puzzle game that is inspired by some of my favorite Nonogram and Picross puzzle games. The player can click on the squares in the grid to change their color. The goal is to color the correct squares following the clues printed on the left side and top of the grid that correspond to the number of colored squares in sequence in each row/column. Built using Javascript and p5.js"}),Object(z.jsx)(j.a,{align:["center","center","center","start","start"],children:Object(z.jsx)(g.a,{id:"button",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",mt:"100px",children:Object(z.jsx)(h.b,{to:"/puzzlegame",children:"Learn More"})})})]}),Object(z.jsx)(m.b,{colSpan:1,children:Object(z.jsx)(j.a,{children:Object(z.jsx)("img",{class:"projectImage",src:I,width:"60%"})})})]})}),Object(z.jsx)(u.a,{id:"projectBox",children:Object(z.jsxs)(m.a,{minH:["100vh","130vh","100vh","55vh","50vh"],p:[1,1,1,3,3],templateColumns:["repeat(1, 1fr)","repeat(1, 1fr)","repeat(1, 1fr)","repeat(3, 1fr)","repeat(3, 1fr)"],gap:6,children:[Object(z.jsx)(m.b,{colSpan:1,children:Object(z.jsx)(j.a,{children:Object(z.jsx)("img",{class:"projectImage",src:k,width:"65%"})})}),Object(z.jsxs)(m.b,{id:"gridItem",w:["90%","84%","80%","80%","80%"],h:"95%",colSpan:[1,1,1,2,2],children:[Object(z.jsx)("div",{id:"projectHeader",children:"Birthday-Eve Bot"}),Object(z.jsx)("div",{id:"projectText",children:'A Discord bot that allows members of a Discord server to wish eachother a "Happy Birthday" on any day of the year with a personalized "Happy Birthday eve eve eve eve eve eve..." message. The Bot stores member data such as discord id and birthday in DynamoDB and retrieves it in order to hand-craft a loving birthday wish from a friend (that will never be annoying). Built in Java and Spring using various AWS services.'}),Object(z.jsx)(j.a,{align:["center","center","center","start","start"],children:Object(z.jsx)(g.a,{id:"button",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:Object(z.jsx)(h.b,{to:"/birthdaybot",children:"Learn More"})})})]})]})})]})},T=a(116),B=a(115),A=a.p+"static/media/Patch_Bot_Command.a4971078.JPG",D=(a.p,a.p+"static/media/Patch_Bot_Update1.3ac824e0.JPG");a.p;var P=function(){var e=Object(d.f)();return Object(z.jsxs)("div",{class:"branches",id:"projectPage",children:[Object(z.jsx)("div",{id:"leaves",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)("div",{id:"leavesleft",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)(g.a,{id:"backButton",onClick:function(){return e.push("/")},leftIcon:Object(z.jsx)(B.a,{}),colorScheme:"brand",variant:"outline"}),Object(z.jsx)(p.a,{id:"projectTitle",children:"Dota 2 Patch Bot"}),Object(z.jsxs)(u.a,{id:"projectSection",children:[Object(z.jsx)(f.a,{id:"text",children:"A Discord bot that checks for updates and news about the video game, Dota 2, and posts links to the official news/updates in a specified discord channel."}),Object(z.jsxs)(m.a,{id:"grid",p:[1,2,2,2,2],templateColumns:["repeat(1, 1fr)","repeat(2, 1fr)","repeat(2, 1fr)","repeat(2, 1fr)","repeat(2, 1fr)"],gap:6,children:[Object(z.jsx)(T.a,{children:Object(z.jsx)(m.b,{w:"100%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:D})})}),Object(z.jsx)(T.a,{children:Object(z.jsx)(m.b,{w:"80%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:A})})})]}),Object(z.jsx)(p.a,{id:"heading",children:"How To Use The Bot"}),Object(z.jsxs)(f.a,{id:"text",children:["Once the admin of a Discord server adds the bot to their server, using the link below, they (and other members) can use any of the programmed commands to interact with the bot and set it up:",Object(z.jsxs)(f.a,{id:"textTab",children:[Object(z.jsx)("br",{}),"'!patch' - reposts the most recent Dota 2 update.",Object(z.jsx)("br",{}),"'!patch help' - posts a list of commands and a short description of what they do.",Object(z.jsx)("br",{}),"'!patch subscribe' - tells the bot to send automatic updates to the channel that this command was sent in.",Object(z.jsx)("br",{}),"'!patch notify' - adds the role of 'Dota2PatchBotNotification' to the user who sent this command."]})]}),Object(z.jsx)(g.a,{id:"button",as:"a",href:"https://discord.com/oauth2/authorize?client_id=836767045084512306&scope=bot&permissions=8",target:"_blank",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:"Add Bot To Server"}),Object(z.jsx)(p.a,{id:"heading",children:"How it Works"}),Object(z.jsxs)(f.a,{id:"text",children:["This bot was built using Javascript and the Discord.js library. It uses the Google Firestore NoSQL document database to store Discord server data and keep track of already-posted updates. In the database, there is a collection of documents, each for a Discord server, each storing the channel id of the channel that is subscribed and the role id of the role that the bot uses to notify members. There is also a document that keeps track of the id of the last-posted update so that it doesn't repeat itself. This database is necessary so that the bot does not lose this information every time it crashes, is restarted, or gets updated. The bot is hosted on Heroku, which automatically restarts the bot if it ever crashes, automatically deploys updates from GitHub, and produces error logs, for convenient Discord bot management. The bot makes calls to the Steam Web API to get information on Dota 2 updates. The GetNewsForApp part of the API allows 4 request arguments: 'appid' (the id of the game, for Dota 2 it's 570), 'count' (how many game updates to return), 'maxlength' (the length of the news entries), and 'format' (in this case, .json). The entities returned have a 'feed_type' attribute which differentiate between official news (marked with a '1'), and game client updates (marked with a '0'), which allows the bot to identify the news that users/players care about.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"When the '!patch' command is sent, the bot responds by posting the most recent non-client update by making a request to the Steam Web API for the last 100 pieces of Dota 2 news and looking through the list for the first entity with a 'feed_type' of '1'.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"The '!patch subscribe' command first checks if the member who wrote the message is an admin, and if not, returns an error message. I wanted to prevent non-admins from changing the channel as that could cause chaos in a Discord server. The bot then checks to see if a Discord role called 'Dota2PatchBotNotification' already exists, and if not, it makes a new one, storing the role id and the channel id in the database.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"When a member of a server uses the '!patch notify' command, it checks to see if a 'Dota2PatchBotNotification' role id exists in the database, and if it doesn't, this indicates that the bot has not been subscribed to a channel yet, and it responds with an error message. Otherwise, it adds the role id to the user's list of roles.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"Meanwhile, another function runs every 2 minutes that calls the Steam Web API, with the same request as the '!patch' command and checks to see if there is any new news/updates. It does this by looking for the newest non-client update/news and comparing that id with the id stored in the database and if they are the same, it doesn't make a new post. If they are not the same, however, this indicates that the newest update is not one we have read before, so it posts it and updates the database."]}),Object(z.jsx)(g.a,{id:"button",as:"a",href:"https://github.com/margueritemb3/dota2pb",target:"_blank",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:"See Code Repository"}),Object(z.jsx)(p.a,{id:"heading",children:"Why?"}),Object(z.jsx)(f.a,{id:"text",children:"As an avid Dota 2 player and the Dota 2 Competitive Lead at the University of Minnesota, Twin Cities, I am deeply involved in the Dota 2 community. Whenever new updates come out, there is often a delay before many people find out, because unless someone is constantly monitoring the steam databases or APIs, they will hear from a friend, who heard from another friend, and so on. As Discord is a popular platform for all kinds of gamers, including Dota 2 players, I thought a great way to solve this problem would be to make a Discord bot that conveniently monitors steam updates, so players don't have to."}),Object(z.jsx)(p.a,{id:"heading",children:"Road Blocks & Difficulties"}),Object(z.jsx)(f.a,{id:"text",children:"At first, the server & last patch data was gathered when the bot started running. This was convenient for testing purposes and focusing on command functionality, but it also meant that the bot would lose all data any time it crashed, was turned off, restarted, or updated. This is of course an issue as it requires the server admin to resubscribe the bot anytime it is restarted and it reposts the most recent news every time it is restarted (even if it has already been posted). To solve this, the bot was connected to a database (google firestore, because its free), which was more complicated, but made the bot durable."}),Object(z.jsx)(p.a,{id:"heading",children:"Potential Extensions"}),Object(z.jsxs)(f.a,{id:"text",children:["Add the ability to subscribe to other games. There Steam Web API has update information on all of the games on the Steam distribution service, making it easy to access information on many games. Would require a bit of a database rework to keep track of the id of the last news posted for multiple games as well as each Discord servers' games they are subscribed to.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"Add the ability to ask the bot for the last 'n' updates. Would be similar to the current '!patch' command, except it would post the n most recent news entities. Would need to query for a factor of 'n' results (as opposed to the current 100) such as 'n * 50' or 'n * 100', as there needs to be enough news items to respond to the command with the correct amount."]})]})]})},q=a.p+"static/media/Puzzle_Blank.9aa5081c.JPG",W=a.p+"static/media/Puzzle_Complete.50c79165.JPG";var C=function(){var e=Object(d.f)();return Object(z.jsxs)("div",{class:"branches",id:"projectPage",children:[Object(z.jsx)("div",{id:"leaves",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)("div",{id:"leavesleft",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)(g.a,{id:"backButton",onClick:function(){return e.push("/")},leftIcon:Object(z.jsx)(B.a,{}),colorScheme:"brand",variant:"outline"}),Object(z.jsx)(p.a,{id:"projectTitle",children:"Grid Puzzle Game"}),Object(z.jsxs)(u.a,{id:"projectSection",children:[Object(z.jsx)(f.a,{id:"text",children:"A randomly generated puzzle game that is inspired by puzzle games like Picross and Nonogram."}),Object(z.jsxs)(m.a,{p:[1,3,3,3,3],templateColumns:["repeat(1, 1fr)","repeat(3, 1fr)","repeat(3, 1fr)","repeat(3, 1fr)","repeat(3, 1fr)"],gap:6,ml:"50px",mr:"50px",children:[Object(z.jsx)(m.b,{w:"100%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:q})}),Object(z.jsx)(m.b,{w:"100%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:I})}),Object(z.jsx)(m.b,{w:"100%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:W})})]}),Object(z.jsx)(p.a,{id:"heading",children:"How To Play"}),Object(z.jsxs)(f.a,{id:"text",children:["Each square in the grid can be clicked to change the color of that square to pink.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"There are number clues on the sides of each row and column of the grid indicating how many squares need to be colored pink in a row. If there are multiple numbers on the same row or column, it indicates that there are multiple groups of filled in squares, each group separated by at least one unfilled box.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"The header of a row/column turns gray when there is a valid sequence of filled in squares in that row/column.",Object(z.jsx)("br",{}),"Note: a header being grayed-out does not mean that row/column is correct, it just means it follows the number clues correctly.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"Clicking a square twice will turn it gray. This has no effect on the solution and is only for note-taking and as a visual aid to mark squares that the player has already figured out will definitely not be filled. The player can choose to use this feature, ignore it, or partially use it. It has no effect on the solution of the puzzle.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"There is also the ability to reset a puzzle board by clicking the 'Reset Puzzle' button in the top left of the game."]}),Object(z.jsx)(g.a,{id:"button",as:"a",href:"https://gridpuzzle.netlify.app/",target:"_blank",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:"Play Game"}),Object(z.jsx)(p.a,{id:"heading",children:"How it Works"}),Object(z.jsxs)(f.a,{id:"text",children:["This game was built using Javascript and the p5.js library, a visual drawing library I was unfamiliar with and learned as I build this game.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"A puzzle is randomly generated by randomly assigning '1's and '0's to spots on a grid (represented by a 2-dimensional array) to represent blank and colored squares. Another 2-dimensional array is also created which keeps track of the players' view of the puzzle and the players' coloring in each square.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"Whenever a square is pressed, it checks every square to see if the coordinates of the click were within any of the squares and then updates the value of the grid array to keep track of that update. It then calls a function that checks for any 'valid' rows/columns that need to be grayed out (or maybe ones that are now no longer grayed out). It also calls a function that checks if the puzzle is completed, by checking if all the rows and columns have been grayed out (this method prevents issues with there being multiple solutions to collection of number clues).",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"The are two more 2-dimensional arrays (one for rows and one for columns) that keep track of the number clues. The strings of numbers printed on the sides of the grid are made from these arrays through an Array join(). These 2-dimensional arrays are built by iterating through the puzzle solution and keeping track of how many colored squares are in sequence on each row and column. These arrays are used to put together regular expressions to check for valid rows (grayed out rows)."]}),Object(z.jsx)(g.a,{id:"button",as:"a",href:"https://github.com/margueritemb3/grid-puzzle",target:"_blank",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:"See Code Repository"}),Object(z.jsx)(p.a,{id:"heading",children:"Why?"}),Object(z.jsx)(f.a,{id:"text",children:"I have always loved puzzles and puzzle games a few years ago, I discovered these grid-like puzzle games (specifically as a mobile app). My favorites are Picture Cross and Picross Luna. I have solved thousands of these puzzles over the years, so I am very familiar with the patterns of solving them, but less so with creating one and I was curious to familiarize myself with that aspect. I also thought it would be fun to recreate a game that I love."}),Object(z.jsx)(p.a,{id:"heading",children:"Road Blocks & Difficulties"}),Object(z.jsxs)(f.a,{id:"text",children:["The biggest issue I had to solve when coding this game, was making the row/column headers (the area with the number clues) gray out when a row or column is filled in following the clues. It is probably worth noting that this is not a required feature to play the game, but I always find it helpful when the Picross games I play have it, as it allows the player to count less, and it is easier to spot mistakes. The reason this was an issue was because there are multiple ways to fill in a row that follow the clues, but may not necessarily be the solution to that row that was generated by the puzzle. I spent a lot of time brainstorming solutions. At first I tried to keep a count of how many squares were filled in and those groupings and compare them to the number clues, but that ended up being an ugly and confusing solution with too many conditionals. Eventually I decided the best way to determine if a row or column was valid according to the clues would be to use regular expressions, so I reorganized the way I was storing data to be more 'string-friendly' and then created regular expressions for each row and column based on the number clues. This solution works well, but it did take a little trial-and-error as I was not very familiar with using regular expressions.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"As mentioned previously, a randomly generated puzzle can have multiple solutions at times. Although I programmed this game to accept any valid solution (in the case that there are many), I am not sure what patterns cause there to be multiple solutions or how to prevent them. Multiple solutions aren't that big of a deal, every puzzle has at least one solution and is solvable, however a puzzle with multiple solutions can be harder to solve as the number clues become more ambiguous. To limit this added difficulty, I increased the ratio of colored squares to blank squares in each puzzle solution. Having more colored squares reduces the ambiguity of the puzzle's number clues as more squares are easily filled in from the beginning. One potentially negative side effect is that this also reduces the average difficulty of the puzzles. That being said, even some of the puzzles I have played on mobile Picross games have had multiple solutions. Figuring out what causes a puzzle to have multiple solutions would require more testing and research."]}),Object(z.jsx)(p.a,{id:"heading",children:"Potential Extensions"}),Object(z.jsxs)(f.a,{id:"text",children:["Add customization to the game (change grid dimensions, change colors, etc). The easy part about this addition is I thought ahead when coding this and every constant value like color or pixel size is stored in a constant at the top of the file and all other values are based off that. This makes it easy to change the values in my game. The hard part would be creating a visual UI to adjust these values, and answering the question of whether it is should be part of the p5.js graphics of the game or the surrounding html.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"In most of the Picross games like this that I have played before, the solution forms the image of a well-known object of some sort such as an apple or a table. It would be cool to have a list of stored puzzles that can be randomly chosen that actually form an image. They could even be images that are more personal to me, like deathly hallows symbol from Harry Potter (as I am a huge Harry Potter fan). This would just require a database or a file of premade 2-dimensional array designs."]})]})]})},H=a.p+"static/media/Web_App_Reference_Architecture.a3b200b9.png",_=a.p+"static/media/BdayBot1.8f68f9d2.JPG",J=a.p+"static/media/BdayBot2.67fc16f8.png";var F=function(){var e=Object(d.f)();return Object(z.jsxs)("div",{class:"branches",id:"projectPage",children:[Object(z.jsx)("div",{id:"leaves",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)("div",{id:"leavesleft",children:Object(b.a)(Array(30).keys()).map((function(e){return Object(z.jsx)("i",{},e)}))}),Object(z.jsx)(g.a,{id:"backButton",onClick:function(){return e.push("/")},leftIcon:Object(z.jsx)(B.a,{}),colorScheme:"brand",variant:"outline"}),Object(z.jsx)(p.a,{id:"projectTitle",children:"Birthday-Eve Bot"}),Object(z.jsxs)(u.a,{id:"projectSection",children:[Object(z.jsx)(f.a,{id:"text",children:'A Discord bot that allows members of a Discord server to send eachother birthday wishes on any day of the year with a "Happy Birthday eve eve eve eve eve eve ..." message.'}),Object(z.jsxs)(m.a,{id:"grid",p:[1,2,2,2,2],templateColumns:["repeat(1, 1fr)","repeat(2, 1fr)","repeat(2, 1fr)","repeat(2, 1fr)","repeat(2, 1fr)"],gap:6,children:[Object(z.jsx)(T.a,{children:Object(z.jsx)(m.b,{w:"100%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:_})})}),Object(z.jsx)(T.a,{children:Object(z.jsx)(m.b,{w:"80%",h:"95%",colSpan:1,children:Object(z.jsx)("img",{class:"projectImage",src:J})})})]}),Object(z.jsx)(p.a,{id:"heading",children:"How To Use The Bot"}),Object(z.jsxs)(f.a,{id:"text",children:["Once the admin of a Discord server adds the bot to their server, using the link below, they (and other members) can use any of the programmed commands to interact with the bot:",Object(z.jsxs)(f.a,{ml:"50px",mr:"50px",children:[Object(z.jsx)("br",{}),"'!birthday @[member's username]' - wish a happy birthday eve to the mentioned member.",Object(z.jsx)("br",{}),"'!add birthday [YYYY-MM-DD]' - add the birthday of the user who sent the message.",Object(z.jsx)("br",{}),"'!help birthday' - posts a list of commands and a short description of what they do."]})]}),Object(z.jsx)(g.a,{id:"button",as:"a",href:"https://discord.com/oauth2/authorize?client_id=859130337326006322&scope=bot&permissions=8y.app/",target:"_blank",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:"Add Bot To Server"}),Object(z.jsx)(p.a,{id:"heading",children:"Why?"}),Object(z.jsxs)(f.a,{id:"text",children:["When I began my internship at Best Buy, I had no familiarity with any of the tools that the team used such as Spring and AWS services. In order to practice using those tools, I decided to work on a mini project that incorporated them. The result is an abomination of an over-engineered discord bot that I am strangely proud of as it marks the first steps of my internship and my out-of-the-classroom experiences.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),'II came up with the idea for making a both with this functionality after my friend wished me a happy birthday 6 months early with the appropriate amount of "eve"s following it. I thought it would be funny if friends could easily send that to eachother whenever they liked. Also I felt it was important to make a simple bot, as I wanted to focus on the tools i was using rather than the complexity of the bot commands.']}),Object(z.jsx)("img",{src:H,mt:"50px"}),Object(z.jsx)(p.a,{id:"heading",children:"How it Works"}),Object(z.jsxs)(f.a,{id:"text",children:["This bot was made using Java, Spring Boot, and a handful of AWS services: DynamoDB, Lambda, API Gateway, and SQS. It also uses the Discord4J Java library to interact with discord objects.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"When the '!birthday @[]' command is read, the bot simply accesses the database (stored in DynamoDB) and finds the birthday of the person who was mentioned by parsing their discord id (snowflake, as discord calls it), from the message. Once the person's birthday is retrieved, it calculates the days to the next birthday (if this year's birthday already happend, then it calculates it for next years). It then uses the result of that calculation to repeatedly add \"eve\"s to the end of the \"Happy Birthday\" string.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"The '!add birthday' command is much more complicated (and excessive). The bot grabs the id of the person who sent the message as well as their birthday and then makes a post request to an API Gateway with the information gathered as query parameters. Then, the API Gateway triggers a lambda function (written in javascript) that then takes apart the query parameters and sets them up as JSON data to send to an SQS queue. The SQS queue sends this JSON data back to the Spring boot bot application wich listens to the SQS queue and takes the new data and adds it to the database.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"Yes, this all couldve been done with just a spring boot app connected to a database. The '!add birthday' flow goes in an entire loop that does nothing except pass information around in different formats. However, the purpose of this bot was not to make an efficient bot, but rather for me to learn some new tools, which I later used in my internship! I also want to clarify that I do understand that this work is uneccessary, and in fact, would be a terrible choice of implementation for something like this. I am aware that there is absolutely no point to using SQS for this as it will never have enough traffic to warrant a message queue and can just call methods as needed. I have the code (about 5 lines) that goes straight past this entire AWS loop and straight to the database in comments."]}),Object(z.jsx)(g.a,{id:"button",as:"a",href:"https://github.com/margueritemb3/dota2pb",target:"_blank",rightIcon:Object(z.jsx)(x.a,{}),colorScheme:"brand",variant:"outline",children:"See Code Repository"}),Object(z.jsx)(p.a,{id:"heading",children:"Road Blocks & Difficulties"}),Object(z.jsxs)(f.a,{id:"text",children:["This bot was not easy, as it was the first Discord bot I had made, and I was also using several other tools and services I had never touched before. Because of that, the first and main difficulty was gaining familiarity with the tools, meaning that this bot took me longer than it would've for someone who had any sort of AWS or Spring experience. I was trying to learn about Beans, Lambda, the Reactor Core Mono class, and tons of other parts that I had never even heard of. After familiarizing myself with the AWS UI and rereading through countless Baeldung tutorials on how to build and integrate things using Spring, I was able to pull together enough of an understanding to build a functional bot.",Object(z.jsx)("br",{})," ",Object(z.jsx)("br",{}),"One issue with this bot, is that it seems to misread a member's discord id if they have a nickname in that discord server. I suspect that discord stores nicknames slightly differently, but I need more research and testing to figure out that issue. It might require the use of regular expressions to fix this bug."]}),Object(z.jsx)(p.a,{id:"heading",children:"Potential Extensions"}),Object(z.jsx)(f.a,{id:"text",children:"Currently this bot isn't hosted anywhere, so it only runs when it is run on my computer, which isn't practical or useful for the members of the discord that want to use this. I am not sure how much this bot would be used or appreciated if it were available at all times, but I think it would still be cool, and I would still use it. If I wanted to keep it on AWS like everything else, I would figure out how to host the Spring Boot app on Amazon's EC2 and probably use Cloud Formation to manage the AWS resources."})]})]})};var G=Object(d.g)((function(e){var t=e.history,a=e.children;return Object(o.useEffect)((function(){var e=t.listen((function(){window.scrollTo(0,0)}));return function(){e()}}),[]),Object(z.jsx)(o.Fragment,{children:a})})),E=Object(l.a)({sm:"600px",md:"768px",lg:"992px",xl:"1200px","2xl":null}),M=Object(n.a)({breakpoints:E,colors:{brand:{100:"#1C2736",200:"#394250",300:"#555D69",400:"#8E939B",500:"#FFFFFF",600:"#FED7E2",700:"#FBB6CE",800:"#F687B3",900:"#ED64A6"}},styles:{global:{body:{bg:"brand.100"}}},components:{Button:{variants:{outline:{_hover:{bg:"brand.600",color:"brand.100"},_active:{bg:"brand.100",color:"brand.600",transform:"scale(0.99)"}}}}}});var L=function(){return Object(z.jsx)(h.a,{children:Object(z.jsx)(c.a,{theme:M,children:Object(z.jsx)("div",{children:Object(z.jsx)(G,{children:Object(z.jsxs)(d.c,{children:[Object(z.jsx)(d.a,{path:"/patchbot",children:Object(z.jsx)(P,{})}),Object(z.jsx)(d.a,{path:"/puzzlegame",children:Object(z.jsx)(C,{})}),Object(z.jsx)(d.a,{path:"/birthdaybot",children:Object(z.jsx)(F,{})}),Object(z.jsx)(d.a,{path:"/",children:Object(z.jsx)(S,{})})]})})})})})},N=function(e){e&&e instanceof Function&&a.e(3).then(a.bind(null,123)).then((function(t){var a=t.getCLS,s=t.getFID,o=t.getFCP,r=t.getLCP,i=t.getTTFB;a(e),s(e),o(e),r(e),i(e)}))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(Object(z.jsxs)(o.StrictMode,{children:[Object(z.jsx)(s.a,{}),Object(z.jsx)(L,{})]}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)})),N()}},[[97,1,2]]]);
//# sourceMappingURL=main.f7d5694d.chunk.js.map